#!/usr/bin/env node

const insecureAppPort = 3000
const insecureApp = require('../apps/insecureApp')
insecureApp.set('port', insecureAppPort)

require('http')
  .createServer(insecureApp)
  .on('listening', onListening)
  .on('error', onError)
  .listen(insecureAppPort)

const secureAppPort = 3333
const secureApp = require('../apps/secureApp')
secureApp.set('port', secureAppPort)

const fs = require('fs')
require('https')
  .createServer({
      key: fs.readFileSync(__dirname + '/key.pem'),
      cert: fs.readFileSync(__dirname + '/cert.pem')
    },
    secureApp)
  .on('listening', onListening)
  .on('error', onError)
  .listen(secureAppPort)

const debug = require('debug')('express-learning:server')

function onListening() {
  const address = this.address()
  const bind = typeof address === 'string' ? 'pipe ' + address : 'port ' + address.port
  debug('Listening on ' + bind)
}

function onError(error) {
  if (error.syscall !== 'listen') throw error

  switch (error.code) {
    case 'EACCES':
      console.error(this.port + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(this.port + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}